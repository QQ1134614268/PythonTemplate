缓存:
    强制缓存: #memory cache, disk cache
        Expires
        Cache-Control
    协商缓存:
        last-modified
        etag
缓存过程:
    1. 查本地缓存, url和body相同
    2. 命中强缓存,未过期,直接使用;
    3. 命中协商缓存,发送请求(last-modified,etag); 304- 使用缓存; 200- 使用返回数据,更新资源 
    4. 没有缓存,从服务端获取资源
参考:
    浏览器页面缓存 - Cache【性能篇】: https://blog.csdn.net/weixin_38080573/article/details/130047364
    从chrome源码解读cache缓存策略: https://zhuanlan.zhihu.com/p/265008027
    浏览器缓存看这一篇就够了: https://segmentfault.com/a/1190000018717463
缓存header:
    Vary: HTTP/1.0; 如果response header里有Vary字段，那么Vary里的每个header遍历一遍，要求本次request和cache里上次request的这些header的值一样，否则cache里的资源无效。
    pragma: HTTP/1.0; Request中, 表明不想获取缓存
    Expires: HTTP/1.0; 如果客户端的时间小于Expires的值时，直接使用缓存结果;

    Cache-Control(HTTP/1.1):
        Request中:
            Cache-control:no-cache(为了兼容，还带了 Pragma:no-cache), 强制取最新数据
            Cache-control:max-age=0
        Response中:
            Cache-Control:public,max-age=5        客户端和代理服务器都可缓存;缓存5秒
            Cache-Control:private,max-age=5      客户端可以缓存; 默认值;缓存5秒
            Cache-Control:s-maxage=xxx  代理服务器缓存; 如果在其有效期内，不去访问CDN等。s-maxage会覆盖 max-age 和 Expires
            Cache-Control:max-age=xxx   缓存内容将在xxx秒后失效; 根据本地时间Date?? 优先级高于 Expires
            Cache-Control:max-age=60,must-revalidate	优先max-age; must-revalidate- 重新请求, 需要200, 返回304无效
            Cache-Control:no-cache      客户端缓存; 协商验证
            Cache-Control:no-store      不缓存
        协商缓存no-cache:
            If-None-Match:协商缓存; 请求时携带 Etag的值; 优先级高于If-Modified-Since; 缓存有效服务器响应304;
            If-Modified-Since:协商缓存; 请求时携带Last-modified的值; 缓存有效服务器响应304;

    隐式缓存(启发式): 没有Cache-Control, 但是有 Last-Modified, Date
备注:
    1. 强缓存: 不会向服务器发送请求，直接从缓存中读取资源。
    2. 弱缓存: 验证后使用

chrome 大小字段:
    from memory cache: 不请求网络资源，资源在内存当中，一般脚本、字体、图片会存在内存当中; 浏览器自行优化的
    from disk cache: 不请求网络资源，在磁盘当中，一般非脚本会存在内存当中，如css等
    报文大小(304): 请求服务端发现资源没有更新，使用本地资源
    资源大小数值(200): 从服务器下载最新资源

用户行为对浏览器缓存的影响:
    打开网页，地址栏输入地址: disk cache | 网络请求
    普通刷新 (F5): memory cache | disk cache | 网络请求 # 页面没有关闭, memory cache可以用
    强制刷新 (Ctrl + F5): 浏览器不使用缓存，因此发送的请求头部均网络请求带有Cache-control:max-age=0,返回304
    禁用缓存: Cache-control:no-cache(为了兼容，还带了 Pragma:no-cache),服务器直接返回 200 和最新内容。
    Ctrl+R: ??
nginx配置:
    - expires 1d;
    - add_header Cache-Control max-age=3600;

    - 开启 Last-Modified:
        if_modified_since off|on;
        add_header  Last-Modified $date_gmt;
    - 开启 Last-Modified:
        etag off|on;
    # more_clear_headers 'Content-Type'; 清理header
axios:
    304: 报错, 不能解析;
    max-age=5,must-revalidate:
        第一次: 返回200
        非第一次强制返回304:
            先走 max-age 强缓存: 缓存200;
            强缓存失效: 返回304,不能解析; must-revalidate 重新请求, 304无效 ??;
            再次出发max-age强缓存: 缓存的304
浏览器协商缓存:
    携带If-None-Match,If-Modified-Since: 如果缓存的是200, 浏览器状态码200,不置灰, size 大小不同
