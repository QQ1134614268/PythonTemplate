镜像以及配置文件:
    1.	镜像文件
        a.	pledge_risk_nginx.tar // 网关
        b.	pledge_risk_api.tar // 信用风险API
        c.	zookeeper.tar // zookeeper
        d.	pledge-ds.tar // 信用风险任务调度
        e.	ainews_app:1.0.tar // 舆情API
        f.	kafka_consumer_1.0.tar // 数据同步服务
        g.	yh_web.tar // 前端服务
        h.	get_cp_list.tar //词表服务
        i.	related_cp.tar //关联服务
        j.	high_risk.tar //高风险判断服务
        k.	risk_score.tar //风险服务
        l.	notice_classifier.tar //公告判断服务
        m.	send_message.tar //推送消息服务
        n.	schedule_task.tar //舆情相关定时任务服务
        o.	dupliate.tar //舆情去重及入库接口
        p.	model_route_restful.tar //舆情数据调度服务
        q.	web_api.tar //舆情查询es有关api
        r.	redis.tar //redis镜像
        s.	flink_udf.jar //舆情入口
        t.	mysql80-master.tar // mysql主镜像
        u.	mysql80-slave.tar // mysql 从镜像
    2.	数据初始化文件
        a.	pledge_risk.sql // 信用风险表结构
        b.	pledge_risk_data.sql // 信用风险基础数据
        c.	ainews.sql // 舆情基础表结构
        d.	ainews_data.sql // 舆情基础数据
        e.	ds.sql // 任务调度表结构
        f.	ds_data.sql // 任务调度基础数据

资源服务器
    1.	Mysql主备部署
        a.	mysql主服务
            i.	在主数据服务器上导入mysql80-master.tar文件
            ii.	docker加载镜像：docker load -i mysql80-master.tar
            iii.	创建数据文件存储位置：mkdir -p /opt/mysql/master
            注：需要根据服务器硬盘的位置，适当调整文件夹的创建位置，应该把文件夹创建到最大的数据盘位置
            iv.	运行docker容器：docker run -p 3339:3306 --name mysql-master -e MYSQL_ROOT_PASSWORD=MLTlUOKVjcwg -v /opt/mysql/master:/var/lib/mysql -d mysql80-master
                注：运行成功后，会有一个默认的账户root，密码为：MLTlUOKVjcwg
            v.	进入mysql容器内：docker exec -it mysql-master /bin/bash
            vi.	连接mysql数据库：mysql -uroot -pMLTlUOKVjcwg
            vii.	创建一个用户给从数据库使用：create user 'repl'@'%' identified with 'mysql_native_password' by 'pWbA9I2mCLSe';
                注：这里创建了一个账户名为repl，密码为pWbA9I2mCLSe的账号
            viii.	给账户授权并刷新：
            GRANT replication slave ON *.* TO 'repl'@'%';
            GRANT ALL privileges ON *.* TO 'repl'@'%';
            flush privileges;
            ix.	查看数据库信息： show master status;
               注： 记录File、Position的值，后面部署从服务器会用到
            x.	退出mysql数据库：exit
            xi.	退出容器：exit
        b.	mysql从服务器
            i.	在从数据服务器上导入mysql80-slave.tar文件
            ii.	docker加载镜像：docker load -i mysql80-slave.tar
            iii.	创建数据文件存储位置：mkdir -p /opt/mysql/slave
                注：需要根据服务器硬盘的位置，适当调整文件夹的创建位置，应该把文件夹创建到最大的数据盘位置
            iv.	运行docker容器：docker run -p 3339:3306 --name mysql-slave -e MYSQL_ROOT_PASSWORD=Pl1W61c8C0Aq -v /opt/mysql/master:/var/lib/mysql -d mysql80-slave
                注：运行成功后，会有一个默认的账户root，密码为：Pl1W61c8C0Aq
            v.	进入mysql容器内：docker exec -it mysql-salve /bin/bash
            vi.	连接mysql数据库：mysql -uroot -pPl1W61c8C0Aq
            vii.	在从服务器设置主服务器，实现主从配置
            CHANGE MASTER TO 
            MASTER_HOST='xxx',                   # mysql主容器所在服务器的IP
            MASTER_PORT=3339,                    # mysql主容器所在服务器的端口
            MASTER_USER='repl',                  # mysql主容器上创建的账号
            MASTER_PASSWORD='pWbA9I2mCLSe',      # mysql主容器上创建的帐号密码
            MASTER_LOG_FILE='mysql-bin.000001',  # mysql主容器的File
            MASTER_LOG_POS=1027;                 # mysql主容器的position
            viii.	开启主从：start slave;
            ix.	检查从服务状态：show slave status\G
             
            标红部分都为YES即是创建成功
            x.	切换到mysql主服务所在的服务器
            xi.	把数据初始化文件复制到服务器上
            xii.	把服务器上的文件逐一复制到容器内：docker cp 文件名 mysql-master:/文件名
            xiii.	进入mysql容器内：docker exec -it mysql-master /bin/bash
            xiv.	连接mysql数据库：mysql -uroot -pMLTlUOKVjcwg
            xv.	按顺序运行命令：
            1.	source /created_databases.sql
            2.	use pledge_risk;
            3.	source /pledge_risk.sql
            4.	source /pledge_risk_data.sql
            5.	use ainews;
            6.	source /ainews.sql
            7.	use ds;
            8.	soruce /ds_01.sql
            9.	soruce /ds_02.sql
            xvi.	退出数据库：exit
            xvii.	退出容器：exit
容器云平台部署:
    1.上传镜像:
        第一种办法
            1. 登录容器云平台
                img: 登录容器云平台.png
            2. 进入到应用管理
                img: 进入到应用管理.png
            3.	点击新增按钮
         
            4.	按图中指示填写对应参数
         
                a.	资源配额直接填写最大值即可
                b.	然后点击确定按钮
            5.	上传镜像到容器云
                a.	进入仓库管理
                 
                b.	点击导入
                 
                c.	选择镜像文件后，点击上传到服务器
     
        第二种办法
            e.	在可以连接外网的服务器上，把所有镜像文件都上传上去
        
    2.	针对所有镜像文件逐一运行：docker load -i 镜像文件全名（包括.tar字符）
    3.	查看镜像的tag: docker images
 
        note: 记录所有镜像对应的image id
        
    h.	针对所有image逐一运行：dokcer tag [image id] egistryimage.chinastock.com.cn:5000/vdicrs/文件名称（不带.tar）
        registryimage.chinastock.com.cn:5000/vdicrs 是镜像仓库的地址前缀，具体以生产环境为准
    i.	然后针对所有image再逐一运行：docker push registryimage.chinastock.com.cn:5000/vdicrs/文件名称（不带.tar）
6.	在应用管理中发布服务
 
7.	选择镜像仓库（在选择镜像版本时均选择最高版本），然后下一步
 
    注：之后的服务部署都重复6~7
8.	部署Zookeeper
 
a.	点击下一步
 
9.	部署信用任务调度平台
 
    a.	把箭头的值填写到对应位置，然后点击添加，就会出现在下方
    b.	下方的资源配置选择，即可如图填写
    c.	所有内容按照如图填写后，点击下一步
 
 
 
    没有特殊说明，填写图中值即可
        MASTER_EXEC_TASK_NUM 10  
        DATABASE_URI mysql+pymysql://root: MLTlUOKVjcwg@10.1.67.21:3339/pledge_risk  
        ZOOKEEPER_QUORUM 10.4.5.202:31810  
        DATABASE_PARAMS useUnicode=true&characterEncoding=UTF-8  
        RESOURCE_STORAGE_TYPE NONE  
        DATABASE_TYPE mysql  
        DATABASE_DRIVER com.mysql.jdbc.Driver  
        DATABASE_HOST 10.1.67.21  
        DATABASE_PORT 3339  
        DATABASE_DATABASE ds  
        DATABASE_USERNAME root  
        DATABASE_PASSWORD MLTlUOKVjcwg  
        TZ Asia/Shanghai  
        MAIL_USER kingdomai@163.com  
        MAIL_SMTP_STARTTLS_ENABLE false  
        MAIL_SMTP_SSL_TRUST smtp.163.com  
        MAIL_SMTP_SSL_ENABLE true  
        MAIL_SERVER_PORT 465  
        MAIL_SERVER_HOST smtp.163.com  
        MAIL_SENDER kingdomai@163.com  
        MAIL_PROTOCOL SMTP  
        MAIL_PASSWD RUEAMQHLYFZWPAPC 
10.	部署信用风险API
 
    a.	如图填写，点击添加，再点击下一步
     
     
    b.	点击创建即可
11.	部署接口汇总服务
 
    a.	如图填写，点击添加，然后点击下一步
 
 
    a.	点击创建，部署完成
12.	舆情服务部署顺序（***重点***）
    由于舆情的各个容器之间有依赖关系，所以这里说明一下容器部署顺序，拓扑关系图参看舆情设计文档。
    
    序号	服务名称	英文名称	所需平台
    1	词表服务	get_cp_list	银河外网服务器
    2	舆情分数计算服务&创建es索引	schedule_task	银河容器云平台
    3	高风险判断服务	high_risk	银河容器云平台
    4	关联判断服务	related_cp	银河容器云平台
    5	风险判断服务	risk_score_restful	银河容器云平台
    6	公告服务	notice	银河容器云平台
    7	入库及去重服务	duplicate	银河容器云平台
    8	模型通路服务	model_route_restful	银河容器云平台
    9	订阅kafka写银河kafka服务	 	银河外网服务器
    10	袋鼠云服务	 	银河袋鼠云平台
    11	舆情服务	ainew_redis	银河容器云平台
    12	舆情后端服务	web_api	银河容器云平台
    13	舆情分数计算服务		银河容器云平台
    14	消息发送服务	send_message	   银河外网服务器
    
        注：序号8,9的备选项是get_kafka_article，若袋鼠云出问题可以运行这个保证舆情线上没问题。
13.定时任务服务（schedule_task）

    实例 个数: 1
    容器服务端口: 无	
    节点端口内存:无	
    CPU:800微核	
    内存	:512M

 
    key	value	备注
    cp_url	10.1.67.25:1119	词表接口
    es_password	Crs_Prod@2021#0621_328	es密码
    es_user	crs_prod	es用户名
    es_port	10.1.87.34:19268,10.1.87.35:19268	es地址及端口
    es_prefix	crs-	es给定的索引前缀
    mysql_host	10.1.67.21	mysql地址
    mysql_port	3339	mysql端口
    mysql_dbname	ainews	mysql数据库
    mysql_user	root	mysql用户
    mysql_password	MLTlUOKVjcwg	mysql密码
        
    创建索引
        进入schedule_task实例终端，执行python -m create_index
14.高风险模型服务（high_risk）

    通过镜像建立服务--》查找镜像--》high_risk
    
    配置一个实例，2核心3G内存

    容器服务端口	节点端口	CPU	内存	 实例个数
    2204	32721	2核	3G	1

    key	value	备注
    cp_url	10.1.67.25:1119	词表接口
    
13.	关联模型服务（related_cp）
    通过镜像建立服务--》查找镜像--》related_cp
    配置两个实例，2核心3G内存
    
    
    容器服务端口	节点端口	CPU	内存	实例个数
    10086	32722	2核	3G	2
 
    key	value	备注
    cp_url	10.1.67.25:1119	词表接口
    
14.	风险模型服务（risk_score_restful）
    通过镜像建立服务--》查找镜像--》risk_score_restful
    配置两个实例，2核心3G内存
    
    容器服务端口	节点端口	CPU	内存	实例个数
    1202	32723	2核	3G	2
 
    key	value	备注
    related_port	10.1.87.30:32722	关联接口
    high_port	10.1.87.30:32721	高风险接口
    cp_url	10.1.67.25:1119	词表接口
    
15.	公告服务（notice）
    通过镜像建立服务--》查找镜像--》notice
    一个实例，1核心1G内存18.
     
    容器服务端口	节点端口	CPU	内存	实例个数
    2000	32724	1核	1G	1
    
16.	入es库兼新闻去重服务（duplicate）
    通过镜像建立服务---》查找镜像----》duplicate
     1核心1G内存1实例
     
    容器服务端口	节点端口	CPU	内存	实例个数
    1212	32725	1核	1G	1

    key	value	备注
    es_password	Crs_Prod@2021#0621_328	es密码
    es_user	crs_prod	es用户名
    es_port	10.1.87.34:19268,10.1.87.35:19268	es地址及端口
    es_prefix	crs-	es给定的索引前缀
    
17.	部署模型调度服务（model_route_restful）
    通过镜像建立服务--》查找镜像--》model_route_restful
    配置一个实例，1核心1G内存
    
    容器服务端口	节点端口	CPU	内存	实例个数
    1203	32726	1核	1G	1

  
    key	value	备注
    MODEL_RISK	http://10.1.87.30:32723 风险接口
    
    MODEL_NOTICE_RISK	http://10.1.87.30:32724 公告接口
    
    DUPLICATE	http://10.1.87.30:32725 去重接口
    
    CP_URL	http://10.1.67.25:1119 词表接口
    

18.	舆情redis服务（ainews_redis）
    通过镜像建立服务---》查找镜像---》redis

    容器服务端口	节点端口	CPU	内存	 实例个数
    6379	32727	800微核	512M	1
 
    注意这里和其它的配置页面不一样！！！   --requirepass后面指定redis密码
    
    类型	内容	备注
    参数	--requirepass “Dragapult”	  --requirepass后面指定redis密码
 

19.	舆情后端服务（web_api）
    通过镜像建立服务---》查找镜像----》web_api
    1核心1G一实例
    
    容器服务端口	节点端口	CPU	内存	实例个数
    1118   	32728	1核	1G	1
     

    key	value	备注
    redis_port	32727	redis端口
    redis_host	10.1.87.30  	redis地址
    redis_password	Dragapult	redis密码
    es_password	Crs_Prod@2021#0621_328	es密码
    es_user	crs_prod	es用户名
    es_port	10.1.87.34:19268,10.1.87.35:19268	es地址及端口
    es_prefix	crs-	es给定的索引前缀
    mysql_host	10.1.67.21	mysql地址
    mysql_port	3339	mysql端口
    mysql_dbname	ainews	mysql数据库
    mysql_user	root	mysql用户
    mysql_password	MLTlUOKVjcwg	mysql密码
    
20.订阅优智kafka写入银河kafka服务

    进入外网服务器,准备好datasync-kafka2kafka.jar,application.yml,jaas_client.conf,krb5.conf,
    编辑application.yml文件
     
    指定kafka的节点，端口，验证文件
    执行nohup java -jar datasync-kafka2kafka.jar --spring.config.location=application.yml >> kafka2kafka.log 2 > &1 &


四、外网服务器部署
    1.	把以下镜像上传到服务商
        a.	ainews_api.tar
        b.	kafka_consumer_1.0.tar
        c.	send_message.tar
        d.	get_cp_list.tar
    2.	舆情api服务
        a.	加载镜像：docker load -i ainews_api.tar
        b.	运行舆情api服务：
            sudo docker run -d \
            --restart=always \
            --name=ainews_api \
            -p 88:3000 \
            -e DIALECT='mysql' \
            -e DB_HOST='mysql主服务的ip地址' \
            -e DB_PORT='mysql主服务的端口' \
            -e DB_NAME='ainews' \
            -e DB_USER_NAME='root' \
            -e DB_PASSWORD='MLTlUOKVjcwg' \
    3.	数据同步服务
        a.	加载镜像：docker load -i kafka_consumer.tar
        b.	优智舆情同步程序部署:
            sudo docker run -d \
            --name=kafka_news_article \
            --restart=always \
            -e KAC_KAFKA_CLUSTER='39.102.52.195:9857' \
            -e KAC_KAFKA_TOPIC='news.article' \
            -e KAC_KAFKA_GROUP='galaxy_test' \
            -e GALAXY_KAFKA_CLUSTER='10.8.99.63:9092' \
            kafaka_consumer python3 -u  -m  kafka_consumer.kafka_main
        c.	折算率同步程序部署：
            sudo docker run -d \
            --name=kafka_conversion_rate \
            --restart=always \
            -e KAC_KAFKA_CLUSTER='39.102.52.195:9857' \
            -e KAC_KAFKA_TOPIC='credit.conversion_rate' \
            -e KAC_KAFKA_GROUP='galaxy_test' \
            -e MYSQL_HOST='mysql主服务的ip' \
            -e MYSQL_PORT=mysq主服务的端口 \
            -e MYSQL_USER='root' \
            -e MYSQL_PWD='MLTlUOKVjcwg' \
            -e MYSQL_DB='pledge_risk' \
            -e HISTORY_ETL='1' \
            --network kafka_network \
            kafaka_consumer python3  -m kafka_consumer.kafka_main
        d.	A股公司同步程序部署:
            sudo docker run -d \
            --name=kafka_Ashare_company \
            --restart=always \
            -e KAC_KAFKA_CLUSTER='39.102.52.195:9857' \
            -e KAC_KAFKA_TOPIC='Ashare_company' \
            -e KAC_KAFKA_GROUP='galaxy_test_011' \
            -e MYSQL_HOST='mysql主服务的ip'  \
            -e MYSQL_PORT=mysq主服务的端口 \
            -e MYSQL_USER='root'  \
            -e MYSQL_PWD='MLTlUOKVjcwg' \
            -e MYSQL_DB='ainews'  \
            -e HISTORY_ETL='1' \
            --network kafka_network \
            kafaka_consumer python3  -m  kafka_consumer.kafka_main
    4.	部署词表服务
       a.解压镜像
         docker load -i get_cp_list.tar
       b.部署词表服务:
         修改get_cp_list.yml文件，涉及的环境变量按mysql实际配置填写
         
            version: '2'
            services:
              web:
                image: get_cp_list
                container_name: get_cp_list
                restart: always
                ports:
                  - 1119:1119
                environment:
                  - mysql_host=10.8.99.63
                  - mysql_port=3306
                  - mysql_dbname=ainews
                  - mysql_user=root
                  - mysql_password=123456

         执行
             docker-compose -f get_cp_list.yml up -d

    5.	部署发送消息服务
         a. 解压镜像
            docker load -i send_message.tar
         b.部署发送消息服务
            修改send_message.yml文件
                version: '2'
                services:
                  send_message:
                    image: send_message
                    container_name: send_message
                    environment:
                      - cp_url=10.8.99.63:1119
                      - ainews_url=10.4.5.202:31118
                      - mysql_host=10.4.5.159
                      - mysql_port=3306
                      - mysql_dbname=ainews
                      - mysql_user=root
                      - mysql_password=UTvrq+j-u5F-
                    restart: always
                    deploy:
                      resources:
                        limits:
                          memory: 3G
            执行docker-compose -f get_cp_list.yml up -d
    

五、袋鼠云平台部署
    地址：10.1.72.125/stream
    LDAP登录
    Zhoushiyong_it@chinastock.com.cn
    sbwyycc@libai112358

    1.	创建任务，通过10.1.72.125:82进入袋鼠云平台，点击实时开发。
     

    2.	点击数据开发。
     

    3.	进入后创建项目，点击数据源。
     

    4.	在数据源右侧点击新增数据源，添加kafka，es作为数据源。
     

    5.	数据源名称可自命名，选择如下es版本并添加已知的es集群地址，es用户名和es密码，点击确定。
     

    6.	点击数据开发。
     

    7.	在界面左边点击加号新建任务。
 

 

        资源管理上传jar包
        函数管理根据jar包定义udf函数
          
         
        右边定义源表和结果表，源表根据kafka填，结果表统一填如下
         
        填写flinksql(会写在统一的sql文件里供复制)
         
        点语法检查确认没问题

         
        点提交，运行

        之后点运维确认代码运行情况

    袋鼠云变更数据源功能说明
 

六、配置清单
    用途	配置
    Nginx容器	1核2G 10G硬盘
    前端	1核2G 10G硬盘
    质押两融	4核16G 10G硬盘
    任务计算	8核16G 10G硬盘
    舆情服务1	8核16G 10G硬盘
    舆情服务2	8核16G 10G硬盘
    Redis容器	1核2G 10G硬盘
    数据同步服务器虚拟机（可连接外网）	4核16G 500G硬盘
    mysql（主备共两个）	4核16G 2T硬盘
    es数据库	8核16G 2T硬盘

七、算法模块问题处理

    银河架构.vsdx:  https://uploader.shimo.im/f/youspUvw2QSE1Y3W.vsdx?fileGuid=473QglLYQwTynGkw
    carry_galaxy.zip:  https://uploader.shimo.im/f/iq2HB8vTpYjVw2Wz.zip?fileGuid=473QglLYQwTynGkw
    galaxy_kafka.zip:  https://uploader.shimo.im/f/sSiqN0Mhij2WL3Gc.zip?fileGuid=473QglLYQwTynGkw
    
    问题排查
        参考《银河架构.vsdx》进行问题排查，根据服务器日志判断问题出现在什么区间
        
    问题处理
        synckafka2kafka.jar服务停止
        此服务出现问题表现形式，袋鼠云源表数据latest不会更新，但是存在历史数据。
    处理方式
        1.立刻重新启动synckafka2kafka.jar服务
        2.使用carry_galaxy项目导入历史数据，carry_galaxy工作原理是直接读取优智kafka历史数据然后调用模型服务，跳过银河kafka和袋鼠云环节，因为我们存在去重服务，不用担心数据会重复展示。修改config/config.ini 文件中时间配置，构建镜像，上传到外网服务器执行即可。

    银河kafka认证出现问题
    此服务出现问题表现形式，袋鼠云源表数据不展示，且无法选择topic。
    也可参考carry_galaxy.zip连接银河kafka测试
    处理方式
        1.	联系银河诗咏索要密钥文件，上传至外网服务器/root 路径下，重启synckafka2kafka服务
        2.	联系银河于雪龙，修改袋鼠云数据源配置，如果不需要切换源，则停止原有服务，重新提交任务执行即可
        3.	如果需要切换数据源，记得保留原有源表映射设置，参考《袋鼠云平台部署/袋鼠云变更数据源功能说明》
        4.	同时将密钥文件发送给算法，替换model_route_restful项目中的密钥，将model_route_restful重新打包部署

